

%   Step 2: Calculation of XU1 and XU2 in ICN

%   Load Impedance data ZN is read from files in Disk D
%   Please make sure that Step 1 has been executed before executing this code

%   Impedance compression range are set in row 102

%   Calculation results "score" are plotted in Figure 1 and command window, where you can find optimal XU1 and XU2 at highest "score"
%   Calculation takes a while. The calculation process can be seen in the command window


clc
clear all

% Read Impdance Data Files (Generated By Step 1)
impedance=dlmread('D:\impedance.txt');
angle=dlmread('D:\angle.txt');
zo=dlmread('D:\impedance_load.txt');
so=dlmread('D:\angle_load.txt');
f=10E6;
[rows,columns]=size(impedance);

% Set Impedance Compression Range
Zmin=15;
Zmax=35;
fmin=30;
fmax=60;

% Set Scan Parameters
steps=10;
XU1min=0;
XU1max=100;
XU2min=-100;
XU2max=0;
XL1min=0;
XL1max=100;
XL2min=-100;
XL2max=0;

% Calculation Progress
nl=0;
progress=0;
    for X1=XU1min:(XU1max-XU1min)/steps:XU1max
        nl=nl+1;
        ll1(nl)=X1;
        ml=0;
        for X2=XU2min:(XU2max-XU2min)/steps:XU2max
            ml=ml+1;
            ll2(ml)=X2;
            score(ml,nl)=0;
            nu=0;
            progress=progress+1;
            for X11=XL1min:(XL1max-XL1min)/steps:XL1max
                nu=nu+1;
                lu1(nu)=X11;
                mu=0;
                for X22=XL2min:(XL2max-XL2min)/steps:XL2max
                    mu=mu+1;
                    lu2(mu)=X22;
                    count(mu,nu)=0;
                    t=0;            %数组指针
                    for t=1:1:columns
                        zN=impedance(t);
                        s=angle(t);
                        m=0;
                        flag=0;
                        for fai1=0:pi/30:pi
                            m=m+1;
                            q(m)=fai1/pi*180;
                            m1=0;
                            for fai2=0:-pi/30:-pi
                                m1=m1+1;
                                p(m1)=fai2/pi*180;
                                iN=100/(zN*cos(s))^2;             
                                iU=iN/(cos(fai1)-sin(fai1)/tan(fai2)); 
                                iL=iN/(cos(fai2)-sin(fai2)/tan(fai1)); 
                                i1x=iU*cos(fai1)+iN*zN*sin(s)/X2;
                                i1y=iU*sin(fai1)-iN*zN*cos(s)/X2;
                                i2x=iL*cos(fai2)+iN*zN*sin(s)/X22;
                                i2y=iL*sin(fai2)-iN*zN*cos(s)/X22;
                                I1=sqrt(i1x^2+i1y^2);
                                I2=sqrt(i2x^2+i2y^2);
                                if(i1y>0) si1=acos(i1x/I1)*180/pi;
                                else si1=-acos(i1x/I1)*180/pi;end
                                if(i2y>0) si2=acos(i2x/I2)*180/pi;
                                else si2=-acos(i2x/I2)*180/pi;end
                                v2x=(1+X11/X22)*iN*zN*cos(s)-iL*X11*sin(fai2)+0.7*i2x;             
                                v2y=(X11/X22+1)*iN*zN*sin(s)+iL*X11*cos(fai2)+0.7*i2y;              
                                v1x=(X1/X2+1)*iN*zN*cos(s)-iU*X1*sin(fai1)+0.9*i1x;             
                                v1y=(X1/X2+1)*iN*zN*cos(s)+iU*X1*cos(fai1)++0.9*i1x;                  
                                V1=sqrt(v1x^2+v1y^2);                               
                                V2=sqrt(v2x^2+v2y^2);                                
                                if(v1y>0) sv1=acos(v1x/V1)*180/pi;
                                else sv1=-acos(v1x/V1)*180/pi;end
                                if(v2y>0) sv2=acos(v2x/V2)*180/pi;
                                else sv2=-acos(v2x/V2)*180/pi;end
                                d1=sv1-si1;                        
                                d2=sv2-si2;                        
                                a1=V1/I1;                          
                                a2=V2/I2;    
                                
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Here to set impedance compression range %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
                                range=logical(a2>Zmin && a2<Zmax && d2<fmax && d2>fmin && a1>Zmin && a1<Zmax && d1<fmax && d1>fmin);
  
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                 
                                
                                if(range) flag=1;break;break;end
                            end
                        end
                        if(flag==1) count(mu,nu)=count(mu,nu)+1;end
                    end
                end
            end
            score(ml,nl)=max(max(count))/columns*100;
            fprintf('Process--> %.0f%%\n',progress/(steps+1)^2*100);
    end
    end
% Plot of scan result "score"
contourf(ll1,ll2,score);
colorbar
xlabel('XU1')
ylabel('XU2')

% Optimal Parameters
[rowopt,colopt]=find(score==max(max(score)),1);
XU2opt=ll2(rowopt);
XU1opt=ll1(colopt);
    if (XU1opt<0) fprintf(' CU1=%.2f pF   XU1=%.2f \n ',-1./XU1opt/(2*pi*f)*1E12,XU1opt);
    else  fprintf('  LU1=%.2f nH   XU1=%.2f \n ',XU1opt./(2*pi*f)*1E9,XU1opt);end
    if (XU2opt<0) fprintf(' CU2=%.2f pF   XU2=%.2f \n ',-1./XU2opt/(2*pi*f)*1E12,XU2opt);
    else  fprintf('  LU2=%.2f nH   XU2=%.2f \n ',XU2opt./(2*pi*f)*1E9,XU2opt);end
    fprintf(' Max area = %.2f%% \n ',max(max(score)));
    
% End of Code
% Revised ON 2022.04.25
% hit_liuchang@outlook.com
